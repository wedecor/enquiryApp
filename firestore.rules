rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Resolve role from users doc of the requester
    function isAdmin() {
      return isSignedIn()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid))
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // User management - Allow read for signed-in users, write for admins
    match /users/{uid} {
      allow read: if isSignedIn();
      allow write: if isSignedIn(); // Temporarily allow all authenticated users to write
    }

    // Enquiries - authenticated users can read and write
    match /enquiries/{enquiryId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();

      // History subcollection
      match /history/{historyId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn();
      }
    }

    // Dropdowns - authenticated users can read, admin can manage
    match /dropdowns/{group}/items/{value} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // Optional aggregated analytics collections (if you deploy functions)
    match /analytics/{doc=**} {
      allow read: if isSignedIn();
    }
  }
}