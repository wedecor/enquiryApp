name: üõ°Ô∏è Security Audit

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Run weekly security audit
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC

jobs:
  gitleaks:
    name: üîç Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional for Pro features

  security-audit:
    name: üõ°Ô∏è Repository Security Audit
    runs-on: ubuntu-latest
    needs: gitleaks  # Run after secret detection
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Guard FCM token location
        run: |
          if grep -R "collection('users').*fcmToken" lib/ || grep -R 'collection("users").*fcmToken' lib/; then
            echo "::error ::Write to users/{uid}.fcmToken detected. Move tokens to users/{uid}/private/notifications/tokens/{token}"
            exit 1
          fi
          if grep -R "collection('users').*webTokens" lib/ || grep -R 'collection("users").*webTokens' lib/; then
            echo "::error ::Write to users/{uid}.webTokens detected. Move tokens to users/{uid}/private/notifications/tokens/{token}"
            exit 1
          fi
          echo "‚úÖ No insecure FCM token storage detected"

      - name: Run security audit
        run: npm run sec:all

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: |
            security-audit-*.json
          retention-days: 30

  flutter-security:
    name: üîí Flutter Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Run Flutter analyze
        run: flutter analyze --fatal-infos

      - name: Check for insecure dependencies
        run: flutter pub deps --style=compact | grep -E "(DEPRECATED|DISCONTINUED)" || true

  firestore-rules:
    name: üî• Firestore Rules Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Validate Firestore rules
        run: |
          if [ -f "firestore.rules" ]; then
            firebase firestore:rules:get --project=demo-project || echo "Rules validation requires Firebase project"
          else
            echo "‚ùå No firestore.rules found"
            exit 1
          fi

  summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    needs: [gitleaks, security-audit, flutter-security, firestore-rules]
    if: always()
    
    steps:
      - name: Security Audit Summary
        run: |
          echo "üõ°Ô∏è Security Audit Complete"
          echo "========================="
          echo "Gitleaks: ${{ needs.gitleaks.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Flutter Security: ${{ needs.flutter-security.result }}"
          echo "Firestore Rules: ${{ needs.firestore-rules.result }}"
          echo ""
          
          if [[ "${{ needs.gitleaks.result }}" == "failure" ]]; then
            echo "‚ùå CRITICAL: Secrets detected in repository"
            exit 1
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "‚ùå CRITICAL: Security vulnerabilities found"
            exit 1
          fi
          
          if [[ "${{ needs.flutter-security.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Flutter security issues found"
          fi
          
          if [[ "${{ needs.firestore-rules.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Firestore rules issues found"
          fi
          
          echo "‚úÖ Security audit completed successfully"
