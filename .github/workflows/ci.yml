name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.32.8'
  DART_VERSION: '3.8.1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze project source
        run: flutter analyze

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run unit and widget tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@master
        with:
          args: emulators:start --only auth,firestore,storage
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Wait for emulators
        run: sleep 15

      - name: Run integration tests
        run: flutter test test_integration_simple.dart

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Build App Bundle
        run: flutter build appbundle --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload App Bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle
          path: build/app/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS
        run: flutter build ios --release --no-codesign

      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/iphoneos/

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Web
        run: flutter build web --release

      - name: Upload Web build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/

  deploy-preview:
    name: Deploy Preview (Web)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: build-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Web build
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web/

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting:preview
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployed successfully!**
              
              🔗 **Preview URL**: https://${{ secrets.FIREBASE_PROJECT_ID }}.web.app
              
              📱 **Build artifacts available for download**`
            })

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [analyze, test, integration-test]
    if: always()
    steps:
      - name: Check if all required jobs passed
        run: |
          if [[ "${{ needs.analyze.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "✅ All quality checks passed!"
            exit 0
          else
            echo "❌ Some quality checks failed!"
            exit 1
          fi

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [analyze, test, integration-test, build-android, build-ios, build-web, quality-gate]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const failedJobs = ['${{ needs.analyze.result }}', '${{ needs.test.result }}', '${{ needs.integration-test.result }}', '${{ needs.build-android.result }}', '${{ needs.build-ios.result }}', '${{ needs.build-web.result }}'].filter(result => result === 'failure');
            
            if (failedJobs.length > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ **CI/CD Pipeline Failed**
                
                The following jobs failed:
                ${failedJobs.map(job => `- ${job}`).join('\n')}
                
                Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`
              });
            } 